#include <catch.hpp>

#include <regiongenerator/impl/OpenSimplexNoise.h>

#include <vector>


TEST_CASE("3D, Seed 0, Size 10x10, Feature 1.", "[opensimplexnoise]")
{
    std::vector<double> control {
        +0.000000, +0.167885, -0.364377, -0.129450, -0.003836, -0.435615, -0.000000, -0.191418, -0.024292, -0.194175,
        -0.381477, +0.106117, +0.025890, +0.129130, +0.235846, -0.000000, -0.435615, +0.024292, +0.226537, -0.331136,
        -0.259539, -0.025890, +0.037077, -0.245555, -0.000000, -0.435615, -0.453874, -0.061489, +0.014064, -0.449439,
        +0.093851, -0.129130, +0.167885, -0.000000, -0.099924, -0.310680, +0.012945, +0.384834, +0.041592, +0.000000,
        +0.507571, +0.099844, +0.000000, -0.031883, -0.095889, -0.152104, -0.034520, -0.435615, +0.000000, +0.381477,
        -0.022254, +0.000000, +0.022254, +0.303009, +0.148867, +0.589396, -0.090215, +0.000000, -0.391186, +0.003836,
        +0.000000, +0.381477, +0.303009, -0.142395, -0.446202, -0.313516, +0.000000, +0.313516, -0.044748, -0.012945,
        +0.090215, -0.660993, +0.025890, -0.006393, +0.099924, -0.000000, +0.513285, -0.374605, -0.391586, -0.149586,
        -0.116345, -0.362460, -0.003836, -0.313516, +0.000000, -0.581246, +0.006393, -0.168285, -0.535699, +0.313516,
        +0.051780, +0.292780, +0.381477, +0.000000, +0.726877, +0.535699, +0.508091, +0.085661, +0.435615, +0.000000,
    };

    long long seed = 0;
    int width = 10;
    int height = 10;
    int feature = 1;

    frts::OpenSimplexNoise noise(seed);
    for (int x = 0; x < width; ++x)
    {
        for (int y = 0; y < height; ++y)
        {
            double value = noise.eval(static_cast<double>(x) / feature, static_cast<double>(y) / feature, 0.0);
            REQUIRE(control.at(x * height + y) == Approx(value));
        }
    }
}

TEST_CASE("2D, Seed 42, Size 30x20, Feature 1.", "[opensimplexnoise]")
{
    std::vector<double> control {
        +0.000000, -0.405523, +0.034685, +0.477703, -0.117749, +0.095931, -0.195641, -0.731097, +0.141295, -0.158053, +0.394771, -0.052119, +0.237898, +0.665857, -0.167715, -0.217013, +0.543733, -0.291826, +0.282406, -0.026758,
        -0.210270, -0.438778, -0.040827, -0.195219, +0.096901, -0.231825, +0.553679, -0.163408, +0.147261, -0.171229, -0.102697, -0.030372, +0.445383, -0.070854, +0.447556, -0.565390, -0.572927, +0.495688, +0.062459, -0.476367,
        -0.080931, -0.416768, +0.565669, +0.225091, -0.547800, +0.243316, -0.147447, +0.356751, -0.158052, +0.409274, -0.212163, -0.781224, +0.071699, +0.488096, +0.078437, -0.106711, +0.142469, -0.062446, +0.479098, +0.278340,
        -0.428282, +0.541479, +0.226590, +0.072393, -0.769902, +0.066502, +0.132793, -0.394771, +0.637612, -0.133360, -0.525473, +0.071622, -0.248102, -0.565390, -0.106711, -0.037517, +0.026765, -0.208058, +0.217747, -0.300871,
        +0.270642, +0.226125, -0.409323, -0.021081, -0.234511, +0.365127, -0.375140, +0.205499, +0.807600, -0.411352, +0.166700, -0.403940, +0.670793, +0.045733, +0.212438, +0.062451, +0.485925, -0.187088, +0.366545, -0.388272,
        +0.225283, -0.050069, +0.754138, -0.221992, +0.371451, +0.434249, +0.316711, -0.668364, +0.044714, +0.071824, -0.168644, -0.410464, +0.234048, -0.338018, -0.062451, +0.479098, -0.211525, -0.229148, -0.452689, +0.113679,
        -0.787302, -0.193270, -0.027446, -0.134118, +0.393027, -0.587640, +0.708190, -0.060574, -0.167464, +0.238764, +0.068261, -0.201731, +0.320767, -0.062443, +0.377616, +0.118684, -0.157424, +0.405460, -0.119326, -0.166667,
        +0.236114, +0.443539, -0.151001, +0.159958, -0.168232, -0.307457, -0.134883, +0.071416, -0.491227, +0.656404, +0.291826, -0.093128, -0.026763, -0.212155, -0.025235, -0.617578, -0.194010, -0.275726, -0.306699, +0.546884,
        -0.141295, -0.152988, +0.388263, -0.637612, +0.132199, +0.470581, +0.166906, -0.201355, +0.414676, +0.725370, -0.440076, +0.026756, +0.660944, -0.608525, +0.054927, +0.176822, +0.274620, -0.166667, +0.242156, +0.694201,
        +0.167455, -0.171229, -0.330429, -0.807136, +0.180799, +0.071824, -0.371228, +0.164202, -0.272610, -0.088649, +0.062446, -0.654117, +0.328853, +0.065164, +0.452689, -0.273306, +0.248510, -0.230054, -0.026963, -0.310825,
        +0.430438, +0.534203, +0.565841, +0.085590, -0.167590, +0.441349, +0.159275, +0.598033, -0.441868, +0.026746, +0.407991, -0.362546, -0.218500, -0.194010, +0.282760, -0.166667, -0.546569, -0.444926, +0.146187, +0.152654,
        -0.587640, -0.532140, -0.655778, +0.167590, -0.520808, +0.068261, -0.425053, -0.565657, +0.026752, +0.131490, -0.252483, -0.229148, +0.445565, -0.279533, +0.388889, +0.523563, -0.128983, +0.316869, +0.469193, +0.045544,
        +0.668364, +0.085771, +0.168148, +0.575384, -0.068261, +0.762612, -0.338018, -0.062469, +0.202597, -0.040150, +0.464444, -0.499919, -0.119326, +0.243074, +0.207048, -0.291101, +0.143422, +0.204634, -0.652638, -0.823260,
        -0.044714, +0.168354, +0.608095, -0.661331, -0.725370, +0.091337, -0.062441, +0.651387, +0.034511, -0.545854, -0.236965, -0.279741, -0.306699, -0.529712, +0.076115, +0.326083, +0.482177, +0.055597, +0.703748, +0.110998,
        -0.071618, +0.458516, -0.314201, +0.211632, +0.614998, +0.026769, -0.559763, +0.058938, -0.006560, +0.474152, +0.118220, -0.552544, +0.030979, +0.335278, +0.132467, +0.221946, +0.411390, -0.160637, -0.110998, -0.107550,
        -0.411769, +0.415391, -0.515148, +0.163097, -0.026746, -0.297252, +0.515109, +0.274899, -0.391122, +0.120958, -0.494354, +0.001546, +0.210905, -0.304375, +0.165638, -0.861096, -0.329413, -0.744846, +0.107629, +0.254953,
        -0.182929, +0.069468, -0.493897, +0.062439, +0.299982, -0.328853, +0.676795, -0.428377, +0.112047, +0.610975, -0.012952, +0.108884, +0.307550, +0.172452, +0.262698, -0.317409, +0.272511, +0.107473, +0.278302, -0.152088,
        +0.701635, -0.091337, -0.026779, -0.580279, +0.362513, -0.523459, +0.219777, +0.279533, +0.119527, +0.295529, -0.620573, +0.308264, -0.393687, -0.015481, +0.533515, +0.119107, +0.046039, -0.445788, -0.514739, +0.220950,
        +0.336226, +0.062460, +0.559763, -0.328853, +0.676795, -0.517107, -0.123659, -0.143391, -0.558921, -0.466749, +0.307550, -0.393687, +0.590519, -0.379930, -0.453328, +0.046160, +0.258848, -0.170620, -0.475567, +0.437853,
        +0.026773, +0.134220, +0.338086, -0.569210, +0.161118, -0.277321, +0.330699, +0.532386, +0.076115, +0.314819, +0.237415, -0.527666, +0.215171, -0.389002, +0.107629, +0.361273, -0.042546, +0.565246, +0.108698, -0.123804,
        -0.732052, -0.184069, -0.660856, +0.452689, -0.275481, +0.219798, -0.525960, -0.548004, +0.130929, -0.148925, -0.256093, -0.147177, +0.377766, +0.107556, +0.321086, -0.225116, -0.302869, -0.211669, -0.123724, -0.266758,
        +0.187064, +0.408457, +0.176822, +0.279741, -0.388889, +0.242156, +0.565981, -0.308369, -0.218217, +0.006522, -0.278594, +0.461437, -0.107535, -0.537847, +0.117807, -0.558092, +0.596865, +0.123894, -0.461605, +0.413110,
        -0.026483, +0.469877, -0.271674, -0.307046, +0.546894, +0.650024, -0.310006, +0.159423, +0.598481, +0.742563, +0.313439, +0.046081, +0.435422, +0.398890, +0.403166, +0.596865, +0.124042, -0.656452, +0.135736, +0.266025,
        -0.146780, +0.281128, -0.248510, -0.194371, +0.265960, -0.128368, +0.413484, -0.589522, -0.262468, +0.083334, -0.107508, -0.214766, -0.571468, +0.108658, -0.390924, +0.123930, +0.002984, +0.259010, -0.094859, -0.148928,
        +0.119852, +0.306699, -0.333571, +0.005806, -0.134923, +0.415970, -0.590519, -0.653231, +0.264402, -0.045930, +0.488572, +0.061078, -0.664936, +0.171736, +0.123843, -0.656452, -0.445351, +0.216444, -0.170276, +0.315093,
        -0.330322, +0.535925, -0.005806, +0.134923, -0.462978, +0.256093, +0.507638, +0.213591, +0.107571, +0.454876, -0.010754, +0.387871, +0.148631, -0.123912, +0.368290, +0.294124, +0.684604, -0.459761, -0.333122, +0.311166,
        -0.208869, +0.265960, -0.123659, +0.462978, +0.256093, -0.136524, -0.561327, +0.046102, -0.345960, +0.127799, -0.514851, +0.068766, -0.123623, +0.749767, -0.470925, -0.801049, +0.152432, -0.325128, +0.614429, -0.512663,
        -0.438356, -0.134923, +0.168723, +0.411390, +0.082566, -0.472249, -0.107508, +0.392639, +0.127799, +0.368558, -0.594067, -0.124039, +0.299363, -0.333116, -0.537730, +0.469056, +0.142706, -0.546224, +0.017196, -0.261815,
        -0.318814, -0.234929, -0.256093, -0.019347, -0.466843, +0.045981, -0.271811, +0.243648, +0.363881, -0.540823, -0.053322, +0.274797, -0.033040, +0.149308, +0.459761, +0.338451, +0.232106, -0.232504, +0.261815, -0.264918,
        -0.211448, +0.006522, -0.278675, +0.472249, -0.046137, -0.495063, -0.146331, +0.058263, -0.500891, -0.124042, +0.662992, +0.082563, -0.328020, -0.148928, +0.336090, -0.614429, +0.520554, -0.329780, +0.262293, -0.478002,
    };

    long long seed = 42;
    int width = 30;
    int height = 20;
    int feature = 1;

    frts::OpenSimplexNoise noise(seed);
    for (int x = 0; x < width; ++x)
    {
        for (int y = 0; y < height; ++y)
        {
            double value = noise.eval(static_cast<double>(x) / feature, static_cast<double>(y) / feature);
            REQUIRE(control.at(x * height + y) == Approx(value));
        }
    }
}

TEST_CASE("3D, Seed 45645, Size 30x20, Feature 10.", "[opensimplexnoise]")
{
    std::vector<double> control {
        -0.000000, +0.061089, +0.116785, +0.162678, +0.194054, +0.206229, +0.195864, +0.162284, +0.108172, +0.039387, -0.036078, -0.109775, -0.174705, -0.227930, -0.270158, -0.299795, -0.310948, -0.297073, -0.251933, -0.171463,
        +0.167069, +0.222880, +0.268084, +0.300190, +0.316406, +0.313636, +0.289770, +0.245024, +0.182697, +0.108982, +0.031730, -0.041477, -0.105302, -0.160469, -0.211048, -0.256417, -0.289858, -0.302247, -0.283061, -0.224786,
        +0.309772, +0.354539, +0.386093, +0.403895, +0.407659, +0.396072, +0.367795, +0.322997, +0.264398, +0.197148, +0.127898, +0.063025, +0.005862, -0.047724, -0.105082, -0.166788, -0.225203, -0.267481, -0.278600, -0.247167,
        +0.403918, +0.431303, +0.446320, +0.449933, +0.444317, +0.430219, +0.407068, +0.374292, +0.332775, +0.285497, +0.236418, +0.189033, +0.144162, +0.095435, +0.033699, -0.042530, -0.124686, -0.195946, -0.237060, -0.233332,
        +0.432488, +0.438065, +0.434885, +0.425667, +0.414107, +0.402968, +0.392566, +0.381812, +0.369369, +0.354531, +0.337177, +0.316606, +0.290146, +0.249653, +0.186477, +0.100146, -0.000036, -0.094924, -0.162464, -0.185145,
        +0.390189, +0.372713, +0.351873, +0.332376, +0.318823, +0.315350, +0.323271, +0.341129, +0.365270, +0.390708, +0.412318, +0.424702, +0.421563, +0.393462, +0.333169, +0.242331, +0.131502, +0.020802, -0.066625, -0.111683,
        +0.284839, +0.246549, +0.211114, +0.184987, +0.173476, +0.181400, +0.210825, +0.259661, +0.322019, +0.389049, +0.450606, +0.496745, +0.518078, +0.505154, +0.452713, +0.363561, +0.249377, +0.130871, +0.031449, -0.029708,
        +0.135940, +0.082153, +0.037473, +0.009323, +0.003482, +0.024761, +0.075405, +0.152602, +0.248567, +0.351400, +0.446928, +0.521440, +0.563549, +0.565698, +0.524793, +0.443528, +0.333654, +0.215451, +0.111719, +0.042873,
        -0.029022, -0.090883, -0.137840, -0.162842, -0.160327, -0.126141, -0.058331, +0.039682, +0.158833, +0.285274, +0.402333, +0.494125, +0.549219, +0.563269, +0.534895, +0.466298, +0.367812, +0.258172, +0.160424, +0.095785,
        -0.179904, -0.241669, -0.283376, -0.300159, -0.287904, -0.243606, -0.165919, -0.058610, +0.068824, +0.201901, +0.323387, +0.417801, +0.476192, +0.496237, +0.478274, +0.424317, +0.342299, +0.249986, +0.170494, +0.123233,
        -0.289984, -0.344095, -0.373937, -0.378376, -0.356341, -0.306521, -0.228308, -0.125449, -0.006939, +0.113692, +0.221183, +0.303631, +0.354951, +0.373458, +0.360957, +0.320198, +0.257946, +0.191392, +0.141173, +0.122812,
        -0.341768, -0.382227, -0.396111, -0.385929, -0.355309, -0.305426, -0.236531, -0.151861, -0.058816, +0.032083, +0.110386, +0.168527, +0.202488, +0.211665, +0.198552, +0.167474, +0.126719, +0.091526, +0.077923, +0.096178,
        -0.331181, -0.354013, -0.350732, -0.326432, -0.289572, -0.244904, -0.193715, -0.138126, -0.082430, -0.032188, +0.007026, +0.031355, +0.039515, +0.032638, +0.013849, -0.011187, -0.031206, -0.033714, -0.008407, +0.049055,
        -0.267870, -0.269733, -0.249491, -0.214068, -0.174484, -0.139066, -0.110573, -0.089316, -0.075607, -0.070515, -0.075309, -0.090024, -0.112764, -0.140207, -0.168246, -0.189672, -0.191919, -0.164796, -0.103612, -0.009855,
        -0.170710, -0.148615, -0.111590, -0.067944, -0.029217, -0.004454, +0.001895, -0.010210, -0.038267, -0.078878, -0.128312, -0.182497, -0.236958, -0.286466, -0.325735, -0.345843, -0.334396, -0.283883, -0.194058, -0.071376,
        -0.058986, -0.011204, +0.042919, +0.094103, +0.130878, +0.144651, +0.130893, +0.089304, +0.023797, -0.058577, -0.149335, -0.240156, -0.324022, -0.395027, -0.447054, -0.469559, -0.450591, -0.384922, -0.275514, -0.132826,
        +0.053140, +0.126267, +0.196903, +0.255409, +0.290673, +0.294482, +0.262796, +0.196099, +0.099716, -0.017045, -0.142742, -0.265908, -0.376657, -0.467726, -0.533293, -0.562341, -0.543335, -0.472321, -0.353545, -0.199534,
        +0.152654, +0.248498, +0.333794, +0.399273, +0.434483, +0.431407, +0.386443, +0.300689, +0.180619, +0.036898, -0.117273, -0.267888, -0.402375, -0.511700, -0.590326, -0.629014, -0.616808, -0.549578, -0.431008, -0.273943,
        +0.229270, +0.343517, +0.440873, +0.512727, +0.549704, +0.544087, +0.492448, +0.396040, +0.261148, +0.098766, -0.076494, -0.248526, -0.402548, -0.527876, -0.618864, -0.668679, -0.668033, -0.611622, -0.501528, -0.349995,
        +0.278066, +0.405449, +0.511942, +0.589229, +0.629510, +0.625737, +0.574470, +0.476311, +0.336599, +0.166084, -0.020108, -0.204807, -0.371930, -0.509634, -0.612046, -0.674316, -0.688803, -0.648818, -0.554756, -0.417276,
        +0.300451, +0.435343, +0.547779, +0.629427, +0.673787, +0.675170, +0.630178, +0.538493, +0.404248, +0.237186, +0.051780, -0.135066, -0.307176, -0.452357, -0.564499, -0.640103, -0.672088, -0.652359, -0.580269, -0.464267,
        +0.302563, +0.439418, +0.554448, +0.639438, +0.688239, +0.696718, +0.662076, +0.583522, +0.463829, +0.310988, +0.137642, -0.040927, -0.209705, -0.356993, -0.476381, -0.564601, -0.614254, -0.616708, -0.570207, -0.481070,
        +0.292485, +0.426401, +0.540965, +0.628317, +0.682263, +0.699001, +0.677006, +0.615806, +0.517009, +0.386400, +0.233881, +0.072002, -0.086413, -0.230759, -0.354059, -0.451617, -0.516696, -0.540964, -0.521157, -0.461464,
        +0.278060, +0.405249, +0.516878, +0.605623, +0.665253, +0.691685, +0.683622, +0.641370, +0.566147, +0.461672, +0.334747, +0.194603, +0.051380, -0.085484, -0.207891, -0.309794, -0.386208, -0.429456, -0.434781, -0.403374,
        +0.264227, +0.382411, +0.489367, +0.578592, +0.643875, +0.680958, +0.688051, +0.664777, +0.612428, +0.533713, +0.432847, +0.315972, +0.190848, +0.066319, -0.049478, -0.150787, -0.233352, -0.290641, -0.316929, -0.309399,
        +0.250879, +0.359686, +0.461654, +0.551252, +0.622043, +0.669397, +0.691005, +0.685576, +0.653541, +0.597271, +0.519938, +0.426012, +0.321848, +0.214462, +0.110041, +0.013814, -0.070086, -0.135637, -0.177063, -0.188338,
        +0.235775, +0.336463, +0.434895, +0.525316, +0.600560, +0.655605, +0.687953, +0.696137, +0.680403, +0.642926, +0.587033, +0.516697, +0.436286, +0.349614, +0.260320, +0.172473, +0.090995, +0.021763, -0.029474, -0.055313,
        +0.222857, +0.315819, +0.410092, +0.499605, +0.576304, +0.634288, +0.671239, +0.686720, +0.682214, +0.660439, +0.624576, +0.577860, +0.522444, +0.458916, +0.388057, +0.312090, +0.235891, +0.166225, +0.109698, +0.073490,
        +0.222858, +0.306608, +0.393105, +0.476306, +0.548118, +0.602427, +0.636915, +0.652676, +0.653278, +0.642531, +0.623659, +0.598833, +0.567942, +0.528735, +0.479163, +0.419359, +0.353340, +0.287588, +0.229886, +0.187299,
        +0.245637, +0.318215, +0.392205, +0.462031, +0.520362, +0.561763, +0.585173, +0.593102, +0.591067, +0.584600, +0.577529, +0.571284, +0.563543, +0.549327, +0.524034, +0.485761, +0.436629, +0.381099, +0.326720, +0.281194,
    };

    long long seed = 45645;
    int width = 30;
    int height = 20;
    int feature = 10;

    frts::OpenSimplexNoise noise(seed);
    for (int x = 0; x < width; ++x)
    {
        for (int y = 0; y < height; ++y)
        {
            double value = noise.eval(static_cast<double>(x) / feature, static_cast<double>(y) / feature, 0.0);
            REQUIRE(control.at(x * height + y) == Approx(value));
        }
    }
}
